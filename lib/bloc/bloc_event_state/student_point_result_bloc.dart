import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:portal_ckc/api/controller/call_api_student.dart';
import 'package:portal_ckc/api/model/student_point_result.dart';
import 'package:portal_ckc/bloc/event/student_point_event.dart';
import 'package:portal_ckc/bloc/state/student_point_state.dart';

class StudentPointResultBloc
    extends Bloc<StudentPointEvent, StudentResultPointState> {
  final _service = CallApiStudent.adminService;

  StudentPointResultBloc() : super(StudentPointStateInitial()) {
    print('üü° StudentPointResultBloc CREATED');
    on<FetchPointResultEvent>(_onFetchPointResultEvent);
  }

  Future<void> _onFetchPointResultEvent(
    FetchPointResultEvent event,
    Emitter<StudentResultPointState> emit,
  ) async {
    print('‚û°Ô∏è ƒêang x·ª≠ l√Ω l·∫•y danh s√°ch ƒëi·ªÉm h·ªçc ph·∫ßn');
    emit(StudentPointStateLoading());

    try {
      final response = await _service.getPointResult();

      if (response.isSuccessful && response.body != null) {
        final body = response.body;
        print('üì¶ Status: ${response.statusCode}');
        print('üì¶ Body: ${response.body}');
        print('üì¶ Error: ${response.error}');

        if (body is Map<String, dynamic>) {
          if (body.containsKey('monTheoHocKy')) {
            final listData = body['monTheoHocKy'] as Map<String, dynamic>;
            final results = listData.map(
              (key, value) => MapEntry(
                key,
                (value as List).map((item) => Subject.fromJson(item)).toList(),
              ),
            );

            emit(StudentPointStateLoaded(results));
            print('data response: HK1: ${results[1]}');
          } else {
            emit(
              StudentPointStateError(
                'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: data kh√¥ng ph·∫£i danh s√°ch',
              ),
            );
          }
        } else {
          emit(
            StudentPointStateError(
              'Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ server (body kh√¥ng ph·∫£i Map)',
            ),
          );
        }
      } else {
        final error = response.error;
        if (error is Map<String, dynamic> && error.containsKey('message')) {
          emit(StudentPointStateError(error['message']));
        } else {
          emit(StudentPointStateError('L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y d·ªØ li·ªáu'));
        }
      }
    } catch (e) {
      emit(StudentPointStateError('L·ªói k·∫øt n·ªëi: $e'));
    }
  }
}
